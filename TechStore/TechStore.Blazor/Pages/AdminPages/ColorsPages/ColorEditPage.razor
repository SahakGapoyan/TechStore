@page "/colors/edit/{id::int}"
@using TechStore.Blazor.DtoModels.Color
@using TechStore.Blazor.DtoModels.Result
@using TechStore.Blazor.Interfaces
@inject IColorApi ColorApi

<MudForm @ref="_form" Model="ColorUpdateDto">
<MudPaper Elevation="5" Class="pa-8 mx-auto" Style="max-width: 600px; margin-top: 24px;">
    <MudText Typo="Typo.h5" Class="mb-6 d-flex align-center">
        <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" />
        Խմբագրել Գույնը
    </MudText>

    @if (ColorUpdateDto == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mx-auto my-8" />
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" md="6" Class="pr-md-4">
                <MudTextField @bind-Value="ColorUpdateDto.Name"
                              Label="Անունը"
                              Variant="Variant.Outlined"
                              For="@(()=>ColorUpdateDto.Name)"
                              Required
                              Class="mb-4"
                              FullWidth />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="ColorUpdateDto.HexCode"
                              Label="Գույնի կոդը"
                              Variant="Variant.Outlined"
                              For="@(()=>ColorUpdateDto.HexCode)"
                              Required
                              Class="mb-4"
                              FullWidth />
            </MudItem>
        </MudGrid>

        <div class="d-flex justify-end mt-4">
            <MudButton OnClick="SaveAsync"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       EndIcon="@Icons.Material.Filled.Save"
                       Class="ml-2">
                Պահպանել
            </MudButton>
        </div>
        @if (!_formIsValid && _formValidated)
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">
                Խնդրում ենք լրացնել բոլոր պարտադիր դաշտերը ճիշտ ձևով։
            </MudAlert>
        }
                @if (_hasValidationErrors)
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">
                <MudText>Խնդրում ենք շտկել հետևյալ սխալները:</MudText>
                <ul>
                    @foreach (var error in _validationErrors)
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </MudAlert>
        }
        @if (!string.IsNullOrEmpty(_apiErrorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">
                @_apiErrorMessage
            </MudAlert>
        }
    }
</MudPaper>
</MudForm>

@code {
    [Inject] private NavigationManager Nav { get; set; } = default!;
    [Parameter] public int id { get; set; }
    private ColorUpdateDto ColorUpdateDto { get; set; } = new ColorUpdateDto();
    ColorDto colorDto = new ColorDto();

    private MudForm _form;
    private bool _formValidated = false;
    private bool _formIsValid = false;

    private List<ValidationError> _validationErrors = new();
    private bool _hasValidationErrors = false;
    private string _apiErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        colorDto = await ColorApi.GetColor(id);
        ColorUpdateDto = new ColorUpdateDto
            {
                Id=colorDto.Id,
                Name = colorDto.Name,
                HexCode = colorDto.HexCode
            };
    }

    private async Task SaveAsync()
    {
        _formValidated = true;
        await _form.Validate();
        _formIsValid = _form.IsValid;
        _hasValidationErrors = false;
        _validationErrors.Clear();
        _apiErrorMessage = string.Empty;
        if (_formIsValid)
        {
            var result = await ColorApi.UpdateColor(id, ColorUpdateDto);
            if (result.Success)
            {
                Nav.NavigateTo("colors");
            }
            else if (result.ValidationErrors != null && result.ValidationErrors.Any())
            {
                _hasValidationErrors = true;
                _validationErrors = result.ValidationErrors;
            }
            else
            {
                _apiErrorMessage = result.ErrorMessage ?? "An unknown error occurred";
            }

            StateHasChanged();
        }
    }
}

@page "/memories/edit/{id::int}"
@using TechStore.Blazor.DtoModels.Memory
@using TechStore.Blazor.Interfaces
@inject IMemoryApi MemoryApi

<MudForm @ref="_form" Model="MemoryUpdateDto">
<MudPaper Elevation="5" Class="pa-8 mx-auto" Style="max-width: 600px; margin-top: 24px;">
    <MudText Typo="Typo.h5" Class="mb-6 d-flex align-center">
        <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" />
        Խմբագրել Հիշողությունը
    </MudText>

    @if (MemoryUpdateDto == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mx-auto my-8" />
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" md="6" Class="pr-md-4">
                <MudTextField @bind-Value="MemoryUpdateDto.Size"
                              Label="Ծավալը"
                              Variant="Variant.Outlined"
                              For="@(()=>MemoryUpdateDto.Size)"
                              Required
                              Class="mb-4"
                              FullWidth />
            </MudItem>
        </MudGrid>

        <div class="d-flex justify-end mt-4">
            <MudButton OnClick="SaveAsync"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       EndIcon="@Icons.Material.Filled.Save"
                       Class="ml-2">
                Պահպանել
            </MudButton>
        </div>
        @if (!_formIsValid && _formValidated)
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">
                Խնդրում ենք լրացնել բոլոր պարտադիր դաշտերը ճիշտ ձևով։
            </MudAlert>
        }
    }
</MudPaper>
</MudForm>

@code {
    [Inject] private NavigationManager Nav { get; set; } = default!;
    [Parameter] public int id { get; set; }
    private MemoryUpdateDto MemoryUpdateDto { get; set; } = new MemoryUpdateDto();
    MemoryDto memoryDto = new MemoryDto();
    private MudForm _form;
    private bool _formValidated = false;
    private bool _formIsValid = false;

    protected override async Task OnInitializedAsync()
    {
        memoryDto = await MemoryApi.GetMemory(id);
        MemoryUpdateDto = new MemoryUpdateDto
            {
                Size = memoryDto.Size
            };
    }

    private async Task SaveAsync()
    {
        _formValidated = true;
        await _form.Validate();
        _formIsValid = _form.IsValid;
        if (_formIsValid)
        {
            await MemoryApi.UpdateMemory(id, MemoryUpdateDto);
            Nav.NavigateTo("memories");
        }
    }
}
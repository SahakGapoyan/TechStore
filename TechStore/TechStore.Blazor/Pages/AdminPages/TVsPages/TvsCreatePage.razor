@page "/tvs/create"
@using TechStore.Blazor.DtoModels.Brand
@using TechStore.Blazor.DtoModels.Category
@using TechStore.Blazor.DtoModels.Color
@using TechStore.Blazor.DtoModels.Laptop
@using TechStore.Blazor.DtoModels.Memory
@using TechStore.Blazor.DtoModels.Model
@using TechStore.Blazor.DtoModels.OS
@using TechStore.Blazor.DtoModels.Ram
@using TechStore.Blazor.DtoModels.Result
@using TechStore.Blazor.DtoModels.Tv
@using TechStore.Blazor.Interfaces
@inject ITvApi TvApi
@inject IColorApi ColorApi
@inject ICategoryApi CategoryApi
@inject IBrandApi BrandApi
@inject IModelApi ModelApi

<MudForm @ref="_form" Model="TvAddDto">
    <MudPaper Elevation="5" Class="pa-8 mx-auto" Style="max-width: 800px; margin-top: 24px;">
        <MudText Typo="Typo.h5" Class="mb-6 d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-2" />
            Ավելացնել Նոր Հեռուստացույց
        </MudText>

        <MudGrid>
            <!-- Left Column -->
            <MudItem xs="12" md="6" Class="pr-md-4">
                <MudTextField @bind-Value="TvAddDto.Name"
                              Label="Անունը"
                              Variant="Variant.Outlined"
                              Class="mb-4"
                              For="@(() => TvAddDto.Name)"
                              FullWidth
                              Required />

                <MudTextField @bind-Value="TvAddDto.Price"
                              Label="Գինը"
                              Variant="Variant.Outlined"
                              For="@(() => TvAddDto.Price)"
                              Class="mb-4"
                              FullWidth
                              Required />

                <MudTextField @bind-Value="TvAddDto.Description"
                              Label="Նկարագրությունը"
                              Variant="Variant.Outlined"
                              Lines="3"
                              Class="mb-4"
                              FullWidth />


                <MudPaper Class="pa-4 mb-4" Elevation="0" Style="border: 1px solid var(--mud-palette-lines-default);">
                    <MudText Typo="Typo.subtitle2" Class="mb-2">Նկարների Հղումները</MudText>

                    @if (TvAddDto.ImagesUrls != null)
                    {
                        @for (int i = 0; i < TvAddDto.ImagesUrls.Count; i++)
                        {
                            var index = i; // Capture the current index
                            <MudGrid Class="mb-2" Spacing="2" Key="@($"image-url-{index}")">
                                <MudItem xs="11">
                                    <MudTextField @bind-Value="TvAddDto.ImagesUrls[index]"
                                                  Variant="Variant.Outlined"
                                                  Label="Նկարի Հղումը" />
                                </MudItem>
                                <MudItem xs="1" Class="d-flex align-center">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Color="Color.Error"
                                                   OnClick="@(() => RemoveImageUrl(index))" />
                                </MudItem>
                            </MudGrid>
                        }
                    }

                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="AddImageUrl"
                               Class="mt-2">
                        Ավելացնել Նկարի Հղում
                    </MudButton>
                </MudPaper>

                <MudCheckBox @bind-Value="TvAddDto.IsAvailable"
                             Label="Առկա է"
                             Class="mb-4" />

            </MudItem>

            <!-- Right Column -->
            <MudItem xs="12" md="6">
                <!-- Dropdown selectors -->
                @if (AvailableCategories.Count > 0)
                {
                    <MudSelect T="int"
                               Label="Կատեգորիան"
                               @bind-Value="TvAddDto.CategoryId"
                               For="@(() => TvAddDto.CategoryId)"
                               Variant="Variant.Outlined"
                               Class="mb-4"
                               Required
                               FullWidth>
                        @foreach (var category in AvailableCategories)
                        {
                            <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
                        }
                    </MudSelect>
                }
                else
                {
                    <MudText Color="Color.Secondary" Typo="Typo.caption">Կատեգորիաները բեռնվում են...</MudText>
                }

                <MudSelect T="int"
                           Label="Բրենդը"
                           @bind-Value="TvAddDto.BrandId"
                           For="@(()=>TvAddDto.BrandId)"
                           Variant="Variant.Outlined"
                           Class="mb-4"
                           Required
                           FullWidth>
                    @foreach (var brand in AvailableBrands)
                    {
                        <MudSelectItem Value="@brand.Id">@brand.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect T="int"
                           Label="Մոդելը"
                           @bind-Value="TvAddDto.ModelId"
                           For="@(()=>TvAddDto.ModelId)"
                           Variant="Variant.Outlined"
                           Class="mb-4"
                           FullWidth>
                    @foreach (var model in AvailableModels)
                    {
                        <MudSelectItem Value="@model.Id">@model.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <!-- Full width additional specs -->
            <MudItem xs="12" Class="mt-4">
                <MudText Typo="Typo.subtitle1" Class="mb-3">Տեխնիկական Բնութագրեր</MudText>
                <MudGrid>
                    <MudItem xs="12" md="4" Class="pr-md-2">
                        <MudTextField @bind-Value="TvAddDto.ScreenSize"
                                      Label="Էկրանի Չափսը"
                                      Variant="Variant.Outlined"
                                      For="@(()=>TvAddDto.ScreenSize)"
                                      Class="mb-4"
                                      Required
                                      FullWidth />
                    </MudItem>

                    <MudItem xs="12" md="4" Class="px-md-2">
                        <MudTextField @bind-Value="TvAddDto.PanelType"
                                      Label="Էկրանի Տեսակը"
                                      For="@(() => TvAddDto.PanelType)"
                                      Variant="Variant.Outlined"
                                      Class="mb-4"
                                      Required
                                      FullWidth />
                    </MudItem>

                    <MudItem xs="12" md="4" Class="pl-md-2">
                        <MudSelect T="int"
                                   Label="Գույնը"
                                   @bind-Value="TvAddDto.ColorId"
                                   For="@(()=>TvAddDto.ColorId)"
                                   Variant="Variant.Outlined"
                                   Class="mb-4"
                                   Required
                                   FullWidth>
                            @foreach (var color in AvailableColors)
                            {
                                <MudSelectItem Value="@color.Id">@color.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudItem>

            <!-- Checkboxes -->
            <MudItem xs="12">
                <MudStack Direction="Direction.Row" Class="mb-4" Wrap="@Wrap.Wrap">
                    <MudCheckBox @bind-Value="TvAddDto.IsSmartTv" Label="Սմարթ Tv" Class="mr-4" />
                </MudStack>
            </MudItem>
        </MudGrid>

        <div class="d-flex justify-end mt-4">
            <MudButton OnClick="NavigateBack"
                       Color="Color.Default"
                       Variant="Variant.Text"
                       Class="mr-2">
                Չեղարկել
            </MudButton>
            <MudButton OnClick="SubmitForm"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       EndIcon="@Icons.Material.Filled.Save"
                       Class="ml-2">
                Ստեղծել Հեռուստացույց
            </MudButton>
        </div>
        @if (!_formIsValid && _formValidated)
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">
                Խնդրում ենք լրացնել բոլոր պարտադիր դաշտերը ճիշտ ձևով։
            </MudAlert>
        }
        @if (_hasValidationErrors)
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">
                <MudText>Խնդրում ենք շտկել հետևյալ սխալները:</MudText>
                <ul>
                    @foreach (var error in _validationErrors)
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </MudAlert>
        }
        @if (!string.IsNullOrEmpty(_apiErrorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mb-4">
                @_apiErrorMessage
            </MudAlert>
        }
    </MudPaper>
</MudForm>

@code {
    [Inject] private NavigationManager Nav { get; set; } = default!;
    private TvAddDto TvAddDto { get; set; } = new TvAddDto();

    private MudForm _form;
    private bool _formValidated = false;
    private bool _formIsValid = false;

    private List<CategoryDto> AvailableCategories { get; set; } = new List<CategoryDto>();
    private List<BrandDto> AvailableBrands { get; set; } = new List<BrandDto>();
    private List<ModelDto> AvailableModels { get; set; } = new List<ModelDto>();
    private List<ColorDto> AvailableColors { get; set; } = new List<ColorDto>();

    private List<ValidationError> _validationErrors = new();
    private bool _hasValidationErrors = false;
    private string _apiErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        AvailableCategories = (await CategoryApi.GetCategories()).ToList();
        var tvCategory = AvailableCategories.FirstOrDefault(c => c.Name == "Հեռուստացույցներ");
        if (tvCategory != null)
        {
            TvAddDto.CategoryId = tvCategory.Id;
            AvailableCategories = new List<CategoryDto> { tvCategory };
        }
        AvailableBrands = (await BrandApi.GetBrands()).ToList();
        AvailableModels = (await ModelApi.GetModels()).ToList();
        AvailableColors = (await ColorApi.GetColors()).ToList();

        TvAddDto.ImagesUrls ??= new List<string>();
        if (TvAddDto.ImagesUrls.Count == 0)
        {
            TvAddDto.ImagesUrls.Add(string.Empty);
        }
    }

    private async Task SubmitForm()
    {
        _formValidated = true;
        await _form.Validate();
        _formIsValid = _form.IsValid;
        _hasValidationErrors = false;
        _validationErrors.Clear();
        _apiErrorMessage = string.Empty;

        if (_formIsValid)
        {
            var result = await TvApi.AddTv(TvAddDto);

            if (result.Success)
            {
                Nav.NavigateTo("tvs");
            }
            else if (result.ValidationErrors != null && result.ValidationErrors.Any())
            {
                _hasValidationErrors = true;
                _validationErrors = result.ValidationErrors;
            }
            else
            {
                _apiErrorMessage = result.ErrorMessage ?? "An unknown error occurred";
            }

            StateHasChanged();
        }
    }

    private void AddImageUrl()
    {
        if (TvAddDto.ImagesUrls == null)
        {
            TvAddDto.ImagesUrls = new List<string>();
        }

        TvAddDto.ImagesUrls.Add(string.Empty);
    }

    private void RemoveImageUrl(int index)
    {
        if (TvAddDto.ImagesUrls == null ||
            index < 0 ||
            index >= TvAddDto.ImagesUrls.Count)
        {
            return;
        }

        TvAddDto.ImagesUrls.RemoveAt(index);

        if (TvAddDto.ImagesUrls.Count == 0)
        {
            TvAddDto.ImagesUrls.Add(string.Empty);
        }
    }


    private async Task CreateSmartphone()
    {
        await TvApi.AddTv(TvAddDto);
        Nav.NavigateTo("tvs");
    }

    private void NavigateBack()
    {
        Nav.NavigateTo("tvs");
    }
}
@page "/BrandsPage/BrandEditPage/{id::int}"
@using TechStore.Blazor.DtoModels.Brand
@using TechStore.Blazor.Interfaces
@inject IBrandApi BrandApi


<MudPaper Elevation="5" Class="pa-8 mx-auto" Style="max-width: 600px; margin-top: 24px;">
    <MudText Typo="Typo.h5" Class="mb-6 d-flex align-center">
        <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" />
        Edit Brand
    </MudText>

    @if (BrandDto == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mx-auto my-8" />
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" md="6" Class="pr-md-4">
                <MudTextField @bind-Value="BrandDto.Name"
                              Label="Name"
                              Variant="Variant.Outlined"
                              Class="mb-4"
                              FullWidth />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="BrandDto.ImageUrl"
                              Label="ImageUrl"
                              Variant="Variant.Outlined"
                              Class="mb-4"
                              FullWidth />
            </MudItem>
        </MudGrid>

        <div class="d-flex justify-end mt-4">
            <MudButton OnClick="SaveAsync"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       EndIcon="@Icons.Material.Filled.Save"
                       Class="ml-2">
                Save Changes
            </MudButton>
        </div>
    }
</MudPaper>

@code {
    [Inject] private NavigationManager Nav { get; set; } = default!;
    [Parameter] public int id { get; set; }
    private BrandDto BrandDto { get; set; } = new BrandDto();

    protected override async Task OnInitializedAsync()
    {
        BrandDto = await BrandApi.GetBrand(id);
    }

    private async Task SaveAsync()
    {
        var brandUpdateDto = new BrandUpdateDto
            {
                Name = BrandDto.Name,
                ImageUrl=BrandDto.ImageUrl
            };
        await BrandApi.UpdateBrand(id, brandUpdateDto);
        Nav.NavigateTo("/BrandsPage");
    }
}

@page "/laptops/edit/{Id::int}"
@using TechStore.Blazor.DtoModels.Brand
@using TechStore.Blazor.DtoModels.Category
@using TechStore.Blazor.DtoModels.Color
@using TechStore.Blazor.DtoModels.Laptop
@using TechStore.Blazor.DtoModels.Memory
@using TechStore.Blazor.DtoModels.Model
@using TechStore.Blazor.DtoModels.OS
@using TechStore.Blazor.DtoModels.Ram
@using TechStore.Blazor.DtoModels.Result
@using TechStore.Blazor.Interfaces
@inject ILaptopApi LaptopApi
@inject IRamApi RamApi
@inject IMemoryApi MemoryApi
@inject IOSApi OSApi
@inject IColorApi ColorApi
@inject ICategoryApi CategoryApi
@inject IBrandApi BrandApi
@inject IModelApi ModelApi
@inject NavigationManager Nav

<MudForm @ref="_form" Model="LaptopUpdateDto">
    <MudGrid>
        <MudContainer Class="mt-auto d-flex justify-space-between align-center"
                      Style="padding: 20px; background-color: white; margin: 0 auto; margin-bottom: 1px; width: 100%; position: relative;">
            <MudText Typo="Typo.h5" Class="mb-6 d-flex align-center" Style="align-items:center">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" />
                Խմբագրել Հեռախոսը
            </MudText>
        </MudContainer>
        <MudContainer Class="d-flex justify-space-between align-center"
                      Style="padding: 16px; background-color: white; margin: 0 auto; margin-bottom: 1px; width: 100%; position: relative;">
            <MudCard Style="width: 100%;">
                <MudCardContent>
                    <MudGrid Style="width: 100%;" GutterSize="3">
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="LaptopUpdateDto.Name"
                                          Label="Անունը"
                                          For="@(()=>LaptopUpdateDto.Name)"
                                          Required />

                            <MudTextField @bind-Value="LaptopUpdateDto.Processor"
                                          Label="Պրոցեսորը"
                                          For="@(()=>LaptopUpdateDto.Processor)"
                                          Required />

                            <MudTextField @bind-Value="LaptopUpdateDto.GPU"
                                          Label="Գրաֆիկական պրոցեսորը"
                                          For="@(()=>LaptopUpdateDto.GPU)"
                                          Required />

                            <MudTextField @bind-Value="LaptopUpdateDto.BatteryLifeInHours"
                                          Label="Մարտկոցի Կյանքի Տևողությունը"
                                          For="@(()=>LaptopUpdateDto.BatteryLifeInHours)"
                                          Required />

                            <MudTextField @bind-Value="LaptopUpdateDto.ScreenSize"
                                          Label="Էկրանի Չափսը"
                                          For="@(()=>LaptopUpdateDto.ScreenSize)"
                                          Required />

                            <MudPaper Class="pa-4 mb-4" Elevation="0" Style="border: 1px solid var(--mud-palette-lines-default);">
                                <MudText Typo="Typo.subtitle2" Class="mb-2">Նկարների Հղումները</MudText>

                                @if (LaptopUpdateDto.ImagesUrls != null)
                                {
                                    @for (int i = 0; i < laptopDto.ImagesUrls.Count; i++)
                                    {
                                        var index = i;
                                        <MudGrid Class="mb-2" Spacing="2" Key="@($"image-url-{index}")">
                                            <MudItem xs="11">
                                                <MudTextField @bind-Value="LaptopUpdateDto.ImagesUrls[index]"
                                                              Variant="Variant.Outlined"
                                                              Label="Նկարի Հղումը" />
                                            </MudItem>
                                            <MudItem xs="1" Class="d-flex align-center">
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                               Color="Color.Error"
                                                               OnClick="@(() => RemoveImageUrl(index))" />
                                            </MudItem>
                                        </MudGrid>
                                    }
                                }

                                <MudButton Variant="Variant.Text"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Add"
                                           OnClick="AddImageUrl"
                                           Class="mt-2">
                                    Ավելացնել Նկարի Հղում
                                </MudButton>
                            </MudPaper>
                            <MudTextField 
                                @bind-Value="LaptopUpdateDto.Price" 
                                Label="Գինը"
                                For="@(() => LaptopUpdateDto.Price)"
                                Required/>

                            <MudTextField @bind-Value="LaptopUpdateDto.Description" Label="Նկարագրությունը" Lines="3" />

                            <MudCheckBox @bind-Value="LaptopUpdateDto.IsAvailable" Label="Առկա է" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <!-- Dropdown selectors for IDs -->
                            <MudSelect T="int?"
                                Label="Օպերատիվ Հիշողությունը" 
                                @bind-Value="LaptopUpdateDto.RamId"
                                Variant="Variant.Outlined">
                                @foreach (var ram in AvailableRams)
                                {
                                    <MudSelectItem Value="@((int?)ram.Id)">@ram.Size GB</MudSelectItem>
                                }
                            </MudSelect>

                            <MudSelect T="int?" Label="Հիշողությունը" @bind-Value="LaptopUpdateDto.MemoryId" Variant="Variant.Outlined">
                                @foreach (var memory in AvailableMemories)
                                {
                                    <MudSelectItem Value="@((int?)memory.Id)">@memory.Size GB</MudSelectItem>
                                }
                            </MudSelect>

                            <MudSelect T="int?" Label="Գույնը" @bind-Value="LaptopUpdateDto.ColorId" Variant="Variant.Outlined">
                                @foreach (var color in AvailableColors)
                                {
                                    <MudSelectItem Value="@((int?)color.Id)">@color.Name</MudSelectItem>
                                }
                            </MudSelect>


                            <MudSelect T="int?" Label="Օպերացիոն Համակարգը" @bind-Value="LaptopUpdateDto.OsId" Variant="Variant.Outlined">
                                @foreach (var os in AvailableOSes)
                                {
                                    <MudSelectItem Value="@((int?)os.Id)">@os.Name</MudSelectItem>
                                }
                            </MudSelect>


                            <MudSelect T="int?" Label="Կատեգորիան" 
                            @bind-Value="LaptopUpdateDto.CategoryId" 
                            Variant="Variant.Outlined"
                            ReadOnly>
                                @foreach (var category in AvailableCategories)
                                {
                                    <MudSelectItem Value="@((int?)category.Id)">@category.Name</MudSelectItem>
                                }
                            </MudSelect>


                            <MudSelect T="int?" Label="Բրենդը" @bind-Value="LaptopUpdateDto.BrandId" Variant="Variant.Outlined">
                                @foreach (var brand in AvailableBrands)
                                {
                                    <MudSelectItem Value="@((int?)brand.Id)">@brand.Name</MudSelectItem>
                                }
                            </MudSelect>

                            <MudSelect T="int?" Label="Մոդելը" @bind-Value="LaptopUpdateDto.ModelId" Variant="Variant.Outlined">
                                @foreach (var model in AvailableBrands)
                                {
                                    <MudSelectItem Value="@((int?)model.Id)">@model.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>

                        <MudItem xs="12">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges">
                                Պահպանել
                            </MudButton>
                            <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="Cancel" Class="ml-2">
                                Չեղարկել
                            </MudButton>
                            @if (!_formIsValid && _formValidated)
                            {
                                <MudAlert Severity="Severity.Error" Class="mb-4">
                                    Խնդրում ենք լրացնել բոլոր պարտադիր դաշտերը ճիշտ ձևով։
                                </MudAlert>
                            }
                            @if (!_formIsValid && _formValidated)
                            {
                                <MudAlert Severity="Severity.Error" Class="mb-4">
                                    Խնդրում ենք լրացնել բոլոր պարտադիր դաշտերը ճիշտ ձևով։
                                </MudAlert>
                            }
                            @if (_hasValidationErrors)
                            {
                                <MudAlert Severity="Severity.Error" Class="mb-4">
                                    <MudText>Խնդրում ենք շտկել հետևյալ սխալները:</MudText>
                                    <ul>
                                        @foreach (var error in _validationErrors)
                                        {
                                            <li>@error.ErrorMessage</li>
                                        }
                                    </ul>
                                </MudAlert>
                            }
                            @if (!string.IsNullOrEmpty(_apiErrorMessage))
                            {
                                <MudAlert Severity="Severity.Error" Class="mb-4">
                                    @_apiErrorMessage
                                </MudAlert>
                            }
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudContainer>
    </MudGrid>
</MudForm>
@code {
    [Parameter] public int Id { get; set; }

    private LaptopUpdateDto LaptopUpdateDto { get; set; } = new LaptopUpdateDto();
    private List<RamDto> AvailableRams { get; set; } = new List<RamDto>();
    private List<MemoryDto> AvailableMemories { get; set; } = new List<MemoryDto>();
    private List<ColorDto> AvailableColors { get; set; } = new List<ColorDto>();
    private List<OSDto> AvailableOSes { get; set; } = new List<OSDto>();
    private List<ModelDto> AvailableModels { get; set; } = new List<ModelDto>();
    private List<BrandDto> AvailableBrands { get; set; } = new List<BrandDto>();
    private List<CategoryDto> AvailableCategories { get; set; } = new List<CategoryDto>();

    LaptopDto laptopDto = new LaptopDto();
    private MudForm _form;
    private bool _formValidated = false;
    private bool _formIsValid = false;

    private List<ValidationError> _validationErrors = new();
    private bool _hasValidationErrors = false;
    private string _apiErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        laptopDto = await LaptopApi.GetLaptop(Id);

        laptopDto.ImagesUrls ??= new List<string>();
        LaptopUpdateDto = new LaptopUpdateDto
            {
                Id=laptopDto.Id,
                Name = laptopDto.Name,
                Price = laptopDto.Price,
                ColorId = laptopDto.ColorId,
                RamId = laptopDto.RamId,
                MemoryId = laptopDto.MemoryId,
                OsId = laptopDto.OsId,
                ModelId = laptopDto.ModelId,
                BrandId = laptopDto.BrandId,
                IsAvailable = laptopDto.IsAvailable,
                ImagesUrls = laptopDto.ImagesUrls,
                Processor = laptopDto.Processor,
                GPU = laptopDto.GPU,
                HasFingerprintSensor = laptopDto.HasFingerprintSensor,
                CategoryId = laptopDto.CategoryId,
                HasTouchScreen = laptopDto.HasTouchScreen,
                BatteryLifeInHours = laptopDto.BatteryLifeInHours
            };
        if (laptopDto.ImagesUrls.Count == 0)
        {
            laptopDto.ImagesUrls.Add(string.Empty);
        }
        AvailableRams = (await RamApi.GetRams()).ToList();
        AvailableMemories = (await MemoryApi.GetMemories()).ToList();
        AvailableColors = (await ColorApi.GetColors()).ToList();
        AvailableModels = (await ModelApi.GetModels()).ToList();
        AvailableBrands = (await BrandApi.GetBrands()).ToList();
    }

    private void AddImageUrl()
    {
        if (laptopDto.ImagesUrls == null)
        {
            laptopDto.ImagesUrls = new List<string>();
        }

        laptopDto.ImagesUrls.Add(string.Empty);
    }

    private void RemoveImageUrl(int index)
    {
        if (laptopDto.ImagesUrls == null ||
            index < 0 ||
            index >= laptopDto.ImagesUrls.Count)
        {
            return;
        }

        laptopDto.ImagesUrls.RemoveAt(index);

        if (laptopDto.ImagesUrls.Count == 0)
        {
            laptopDto.ImagesUrls.Add(string.Empty);
        }
    }

    private async Task SaveChanges()
    {
        _formValidated = true;
        await _form.Validate();
        _formIsValid = _form.IsValid;
        _hasValidationErrors = false;
        _validationErrors.Clear();
        _apiErrorMessage = string.Empty;
        if (_formIsValid)
        {
            var result = await LaptopApi.Update(Id, LaptopUpdateDto);
            if (result.Success)
            {
                Nav.NavigateTo("laptops");
            }
            else if (result.ValidationErrors != null && result.ValidationErrors.Any())
            {
                _hasValidationErrors = true;
                _validationErrors = result.ValidationErrors;
            }
            else
            {
                _apiErrorMessage = result.ErrorMessage ?? "An unknown error occurred";
            }

            StateHasChanged();
        }
    }

    private void Cancel()
    {
        Nav.NavigateTo("laptops");
    }
}

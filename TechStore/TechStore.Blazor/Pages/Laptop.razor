@page "/category/laptops"
@using TechStore.Blazor.Apis
@using TechStore.Blazor.DtoModels.Brand
@using TechStore.Blazor.DtoModels.Category
@using TechStore.Blazor.DtoModels.Color
@using TechStore.Blazor.DtoModels.Laptop
@using TechStore.Blazor.DtoModels.Memory
@using TechStore.Blazor.DtoModels.Model
@using TechStore.Blazor.DtoModels.OS
@using TechStore.Blazor.DtoModels.Ram
@using TechStore.Blazor.DtoModels.SmartPhone
@using TechStore.Blazor.Interfaces
@inject ICategoryApi CategoryApi
@inject ISmartPhoneApi SmartPhoneApi
@inject ILaptopApi LaptopApi
@inject IBrandApi BrandApi
@inject IOSApi OSApi
@inject IRamApi RamApi
@inject IMemoryApi MemoryApi
@inject IModelApi ModelApi
@inject IColorApi ColorApi




<MudGrid Class="mt-auto">
    @if (Categories is not null)
    {
        <MudContainer Class="mt-auto">
            <div style="display: flex; align-items: center; justify-content:center">
                <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft" OnClick="ScrollLeft" />

                <div class="hide-scrollbar" style="overflow-x: auto; white-space: nowrap; scroll-behavior: smooth; width: auto;" @ref="scrollContainer">
                    <div style="display: flex; gap: 1rem;">
                        @foreach (var category in Categories)
                        {
                            <MudCard Class="card-hover" Style="min-width: 150px; cursor: pointer; height: auto;" @onclick="@(() => NavigateToCategory(category.Name.ToLower()))">
                                <MudCardContent Style="display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100%; padding: 16px;">
                                    <MudIcon Icon="@category.Icon" Size="Size.Medium" Style="margin-bottom: 8px;" />
                                    <MudText Typo="Typo.h6" Style="margin: 0; text-align: center;">@category.Name</MudText>
                                </MudCardContent>
                            </MudCard>
                        }
                    </div>
                </div>

                <MudIconButton Icon="@Icons.Material.Filled.ChevronRight" OnClick="ScrollRight" />
            </div>
        </MudContainer>
    }
</MudGrid>

<div style="display: flex; flex-direction: column; gap: 0;">
    <!-- Phones Header -->
    <MudContainer Class="d-flex"
                  Style="padding: 16px; background-color: white; max-width: 1200px; margin: 0 auto;margin-bottom: 1px; width: 100%;position:relative;">
        <MudText Typo="Typo.h5" Color="Color.Dark" Style="font-weight:600;text-align: left; width: 100%;">Հեռախոսներ</MudText>

        <!-- Mobile Filter Button -->

        <MudButton Class="d-md-none ml-2"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Tune"
                   IconSize="Size.Small"
                   OnClick="ToggleMobileFilters"
                   Style="@(showMobileFilters ? "display: none;" : "display: block;")">
        </MudButton>
    </MudContainer>

    <!-- Mobile Filter Overlay -->
    <div class="filter-overlay @(showMobileFilters ? "open" : "")" @onclick="ToggleMobileFilters"></div>
    <!-- Mobile Filter Sidebar -->
    <div class="filter-sidebar @(showMobileFilters ? "open" : "")">
        <div class="filter-sidebar-header">
            <MudText Typo="Typo.h6" Color="Color.Dark" Style="font-weight: 600;">Ֆիլտրեր</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Close"
                           OnClick="ToggleMobileFilters" />

        </div>

        <!-- Brand Filter -->
        <div class="filter-section">
            <MudText Typo="Typo.subtitle1" Class="filter-title" Style="margin-top: -24px;">ԲՐԵՆԴՆԵՐ</MudText>
            <div style="display: flex; flex-direction: column;">
                <div style="display: flex; flex-wrap: wrap; gap: 8px;padding-bottom: 8px;">
                    @if (Brands is not null)
                    {
                        @foreach (var brand in (showAllBrands ? Brands : Brands.Take(defaultVisibleCount)))
                        {
                            <MudItem sm="3">
                                <MudCard Class="product-card"
                                         Style="@GetBrandCardStyle(brand.Id)"
                                         @onclick="@(() => ToggleBrandSelection(brand.Id))">

                                    <div class="image-container"
                                         style="width: 100%;aspect-ratio: 5/3;display: flex;justify-content: center;align-items: center;">
                                        <MudCardMedia Image="@brand.ImageUrl" Class="product-image" Style="width: 100%;height: 100%; object-fit: cover;" />
                                    </div>
                                </MudCard>
                            </MudItem>
                        }
                    }
                </div>
                @if (Brands != null && Brands.Count > defaultVisibleCount)
                {
                    <div style="margin-top: 8px; display: flex; justify-content: center;">
                        <MudButton Variant="Variant.Text"
                                   Size="Size.Small"
                                   Color="@(showAllBrands ? Color.Secondary : Color.Primary)"
                                   OnClick="@ToggleShowAllBrands">
                            @(showAllBrands ? "Փակել" : "Տեսնել Ավելին")
                        </MudButton>
                    </div>
                }
                <div style="border-bottom: 1px solid #ddd; margin-top: 8px;"></div> <!-- Border after everything -->
            </div>
        </div>

        <!-- OS Filter -->
        <div class="filter-section">
            <MudText Typo="Typo.subtitle1" Class="filter-title" Style="margin-top: -24px;">ՕՊԵՐԱՑԻՈՆ ՀԱՄԱԿԱՐԳ</MudText>
            <div style="display: flex; flex-direction: column;">
                <div style="display: flex; flex-wrap: wrap; gap: 8px;padding-bottom: 8px;">
                    @if (Oses is not null)
                    {
                        @foreach (var os in (showAllOses ? Oses : Oses.Take(defaultVisibleCount)))
                        {
                            <MudChip T="int"
                                     Color="@(selectedOses.Contains(os.Id) ? Color.Primary : Color.Default)"
                                     Variant="@(selectedOses.Contains(os.Id) ? Variant.Filled : Variant.Outlined)"
                                     OnClick="@(() => ToggleOsSelection(os.Id))"
                                     Class="os-chip">
                                @os.Name
                            </MudChip>
                        }
                    }
                </div>
                @if (Oses != null && Oses.Count > defaultVisibleCount)
                {
                    <div style="margin-top: 8px; display: flex; justify-content: center;">
                        <MudButton Variant="Variant.Text"
                                   Size="Size.Small"
                                   Color="@(showAllOses ? Color.Secondary : Color.Primary)"
                                   OnClick="@ToggleShowAllOses">
                            @(showAllOses ? "Փակել" : "Տեսնել Ավելին")
                        </MudButton>
                    </div>
                }
                <div style="border-bottom: 1px solid #ddd; margin-top: 8px;"></div> <!-- Border after everything -->
            </div>
        </div>


        <!-- Model Filter -->
        <div class="filter-section">
            <MudText Typo="Typo.subtitle1" Class="filter-title" Style="margin-top: -24px;">ՀԱՅՏԱՐԱՐՈՒԹՅԱՆ ՏԱՐԻՆ</MudText>
            <div style="display: flex; flex-direction: column;">
                <div style="display: flex; flex-wrap: wrap; gap: 8px;padding-bottom: 8px;">
                    @if (Models is not null)
                    {
                        @foreach (var year in (showAllYears
                       ? Models.Select(m => m.AnnouncementYear).Distinct().OrderByDescending(y => y)
                       : Models.Select(m => m.AnnouncementYear).Distinct().OrderByDescending(y => y).Take(defaultVisibleCount)))
                        {
                            <MudChip T="int"
                                     Color="@(selectedYears.Contains(year) ? Color.Primary : Color.Default)"
                                     Variant="@(selectedYears.Contains(year) ? Variant.Filled : Variant.Outlined)"
                                     OnClick="@(() => ToggleYearSelection(year))"
                                     Class="os-chip">
                                @year
                            </MudChip>
                        }
                    }
                </div>
                @if (Models != null && Models.Select(m => m.AnnouncementYear).Distinct().Count() > defaultVisibleCount)
                {
                    <div style="margin-top: 8px; display: flex; justify-content: center;">
                        <MudButton Variant="Variant.Text"
                                   Size="Size.Small"
                                   Color="@(showAllYears ? Color.Secondary : Color.Primary)"
                                   OnClick="@ToggleShowAllYears">
                            @(showAllYears ? "Փակել" : "Տեսնել Ավելին")
                        </MudButton>
                    </div>
                }
                <div style="border-bottom: 1px solid #ddd; margin-top: 8px;"></div> <!-- Border after everything -->
            </div>
        </div>

        <!-- Memory Filter -->
        <div class="filter-section">
            <MudText Typo="Typo.subtitle1" Class="filter-title" Style="margin-top: -24px;">ՀԻՇՈՂՈՒԹՅՈՒՆ</MudText>
            <div style="display: flex; flex-direction: column;">
                <div style="display: flex; flex-wrap: wrap; gap: 8px;padding-bottom: 8px;">
                    @if (Memories is not null)
                    {
                        @foreach (var memory in (showAllMemories ? Memories : Memories.Take(defaultVisibleCount)))
                        {
                            <MudChip T="int"
                                     Color="@(selectedMemories.Contains(memory.Id) ? Color.Primary : Color.Default)"
                                     Variant="@(selectedMemories.Contains(memory.Id) ? Variant.Filled : Variant.Outlined)"
                                     OnClick="@(() => ToggleMemorySelection(memory.Id))"
                                     Class="os-chip">
                                @memory.Size
                            </MudChip>
                        }
                    }
                </div>
                @if (Memories != null && Memories.Count > defaultVisibleCount)
                {
                    <div style="margin-top: 8px; display: flex; justify-content: center;">
                        <MudButton Variant="Variant.Text"
                                   Size="Size.Small"
                                   Color="@(showAllMemories ? Color.Secondary : Color.Primary)"
                                   OnClick="@ToggleShowAllMemories">
                            @(showAllMemories ? "Փակել" : "Տեսնել Ավելին")
                        </MudButton>
                    </div>
                }
                <div style="border-bottom: 1px solid #ddd; margin-top: 8px;"></div> <!-- Border after everything -->
            </div>
        </div>

        <!-- Ram Filter -->
        <div class="filter-section">
            <MudText Typo="Typo.subtitle1" Class="filter-title" Style="margin-top: -24px;">ՕՊԵՐԱՏԻՎ ՀԻՇՈՂՈՒԹՅՈՒՆ</MudText>
            <div style="display: flex; flex-direction: column;">
                <div style="display: flex; flex-wrap: wrap; gap: 8px;padding-bottom: 8px; ">
                    @if (Rams is not null)
                    {
                        @foreach (var ram in (showAllRams ? Rams : Rams.Take(defaultVisibleCount)))
                        {
                            <MudChip T="int"
                                     Color="@(selectedRams.Contains(ram.Id) ? Color.Primary : Color.Default)"
                                     Variant="@(selectedRams.Contains(ram.Id) ? Variant.Filled : Variant.Outlined)"
                                     OnClick="@(() => ToggleRamSelection(ram.Id))"
                                     Class="os-chip">
                                @ram.Size
                            </MudChip>
                        }
                    }
                </div>
                @if (Rams != null && Rams.Count > defaultVisibleCount)
                {
                    <div style="margin-top: 8px; display: flex; justify-content: center;">
                        <MudButton Variant="Variant.Text"
                                   Size="Size.Small"
                                   Color="@(showAllRams ? Color.Secondary : Color.Primary)"
                                   OnClick="@ToggleShowAllRams">
                            @(showAllRams ? "Փակել" : "Տեսնել Ավելին")
                        </MudButton>
                    </div>
                }
                <div style="border-bottom: 1px solid #ddd; margin-top: 8px;"></div> <!-- Border after everything -->
            </div>
        </div>

        <!-- Color Filter -->
        <div class="filter-section color-filter-container">
            <MudText Typo="Typo.subtitle1" Class="filter-title" Style="margin-top: -24px;">ԱՌԿԱ ԳՈՒՅՆԵՐ</MudText>
            <div style="display: flex; flex-direction: column;">
                <div class="os-chips-container">
                    @if (Colors is not null)
                    {
                        @foreach (var color in (showAllColors ? Colors : Colors.Take(defaultVisibleCount)))
                        {
                            <div style="display: flex; flex-direction: column; align-items: center;">
                                <!-- Color swatch -->
                                <div class="color-swatch @(selectedColors.Contains(color.Id) ? "selected" : "")"
                                     style="background-color: @color.HexCode;"
                                     @onclick="@(() => ToggleColorSelection(color.Id))">
                                </div>
                            </div>
                        }
                    }
                </div>
                @if (Colors != null && Colors.Count > defaultVisibleCount)
                {
                    <div style="margin-top: 8px; display: flex; justify-content: center;">
                        <MudButton Variant="Variant.Text"
                                   Size="Size.Small"
                                   Color="@(showAllColors ? Color.Secondary : Color.Primary)"
                                   OnClick="@ToggleShowAllColors">
                            @(showAllColors ? "Փակել" : "Տեսնել Ավելին")
                        </MudButton>
                    </div>
                }
                <div style="border-bottom: 1px solid #ddd; margin-top: 8px;"></div> <!--  Border after everything -->
            </div>
        </div>

        <div style="display: flex; gap: 8px; margin-top: 24px;">
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Secondary"
                       FullWidth="true"
                       OnClick="ResetFilters">
                Reset
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       FullWidth="true"
                       OnClick="() => ApplyFilters(true)">
                Apply
            </MudButton>
        </div>
    </div>


    <!-- Main Content: Filter + Products (inside SAME MudContainer) -->
    <MudContainer MaxWidth="MaxWidth.False" Style="max-width: 1200px; margin: 0 auto; padding: 0;">
        <div style="display: flex; gap: 5px;">

            <!-- Left: Filter Options -->

            <div style="width: 250px; background-color: #f5f5f5; padding: 0px;" class="d-none d-md-block">
                <MudText Typo="Typo.h6" Color="Color.Dark" Style="font-weight:600;margin-bottom: 1px;margin-block-start:1px; background-color: white;padding:16px;">Ֆիլտր</MudText>

                <div style="display: flex; flex-direction: column; gap: 1px;">
                    <MudCard Style="padding: 16px; min-height: 150px;border-radius: 0; box-shadow: none;margin-bottom: 1px;margin-block-start:1px;">
                        <MudText Typo="Typo.subtitle1" Color="Color.Dark" Style="font-weight: 600;">ԲՐԵՆԴՆԵՐ</MudText>
                        <!-- You can add filter elements here -->
                        <div style="flex: 1;">
                            <MudGrid GutterSize="0" Spacing="1">
                                @if (Brands is not null)
                                {
                                    @foreach (var brand in (showAllBrands ? Brands : Brands.Take(defaultVisibleCount)))
                                    {
                                        <MudItem md="5" lg="4">
                                            <MudCard Class="product-card"
                                                     Style="@GetBrandCardStyle(brand.Id)"
                                                     @onclick="@(() => ToggleBrandSelection(brand.Id))">

                                                <div class="image-container"
                                                     style="width: 100%;aspect-ratio: 5/3;display: flex;justify-content: center;align-items: center;">
                                                    <MudCardMedia Image="@brand.ImageUrl" Class="product-image" Style="width: 100%;height: 100%; object-fit: cover;" />
                                                </div>
                                            </MudCard>
                                        </MudItem>
                                    }
                                }
                            </MudGrid>
                            @if (Brands != null && Brands.Count > defaultVisibleCount)
                            {
                                <div style="margin-top: 8px; display: flex; justify-content: center;">
                                    <MudButton Variant="Variant.Text"
                                               Size="Size.Small"
                                               Color="@(showAllBrands ? Color.Secondary : Color.Primary)"
                                               OnClick="@ToggleShowAllBrands">
                                        @(showAllBrands ? "Փակել" : "Տեսնել Ավելին")
                                    </MudButton>
                                </div>
                            }
                        </div>
                    </MudCard>

                    <MudCard Style="padding: 16px; min-height: 150px; border-radius: 0; box-shadow: none; margin-bottom: 1px; margin-block-start: 1px;">
                        <MudText Typo="Typo.subtitle1" Color="Color.Dark" Style="font-weight: 600;">
                            ՕՊԵՐԱՑԻՈՆ ՀԱՄԱԿԱՐԳ
                        </MudText>

                        <div style="display: flex; flex-direction: column;">
                            <div style="display: flex; flex-wrap: wrap; gap: 0px;">
                                @if (Oses is not null)
                                {
                                    @foreach (var os in (showAllOses ? Oses : Oses.Take(defaultVisibleCount)))
                                    {
                                        <MudChip T="int"
                                                 Color="@(selectedOses.Contains(os.Id) ? Color.Primary : Color.Default)"
                                                 Variant="@(selectedOses.Contains(os.Id) ? Variant.Filled : Variant.Outlined)"
                                                 OnClick="@(() => ToggleOsSelection(os.Id))"
                                                 Class="os-chip">
                                            @os.Name
                                        </MudChip>
                                    }
                                }
                            </div>

                            @if (Oses != null && Oses.Count > defaultVisibleCount)
                            {
                                <div style="margin-top: 8px; display: flex; justify-content: center;">
                                    <MudButton Variant="Variant.Text"
                                               Size="Size.Small"
                                               Color="@(showAllOses ? Color.Secondary : Color.Primary)"
                                               OnClick="@ToggleShowAllOses">
                                        @(showAllOses ? "Փակել" : "Տեսնել Ավելին")
                                    </MudButton>
                                </div>
                            }
                        </div>
                    </MudCard>

                    <MudCard Style="padding: 16px; min-height: 150px;border-radius: 0; box-shadow: none;margin-bottom: 1px;margin-block-start:1px;">
                        <MudText Typo="Typo.subtitle1" Color="Color.Dark" Style="font-weight: 600;">ՀԱՅՏԱՐԱՐՈՒԹՅԱՆ ՏԱՐԻՆ</MudText>
                        <!-- You can add filter elements here -->
                        <div style="display: flex; flex-direction: column;">
                            <div style="display: flex; flex-wrap: wrap; gap: 0px;">
                                @if (Models is not null)
                                {
                                    @foreach (var year in (showAllYears
                                   ? Models.Select(m => m.AnnouncementYear).Distinct().OrderByDescending(y => y)
                                   : Models.Select(m => m.AnnouncementYear).Distinct().OrderByDescending(y => y).Take(defaultVisibleCount)))
                                    {
                                        <MudChip T="int"
                                                 Color="@(selectedYears.Contains(year) ? Color.Primary : Color.Default)"
                                                 Variant="@(selectedYears.Contains(year) ? Variant.Filled : Variant.Outlined)"
                                                 OnClick="@(() => ToggleYearSelection(year))"
                                                 Class="os-chip">
                                            @year
                                        </MudChip>
                                    }
                                }
                            </div>
                            @if (Models != null && Models.Select(m => m.AnnouncementYear).Distinct().Count() > defaultVisibleCount)
                            {
                                <div style="margin-top: 8px; display: flex; justify-content: center;">
                                    <MudButton Variant="Variant.Text"
                                               Size="Size.Small"
                                               Color="@(showAllYears ? Color.Secondary : Color.Primary)"
                                               OnClick="@ToggleShowAllYears">
                                        @(showAllYears ? "Փակել" : "Տեսնել Ավելին")
                                    </MudButton>
                                </div>
                            }
                        </div>
                    </MudCard>

                    <MudCard Style="padding: 16px; min-height: 150px;border-radius: 0; box-shadow: none;margin-bottom: 1px;margin-block-start:1px;">
                        <MudText Typo="Typo.subtitle1" Color="Color.Dark" Style="font-weight: 600;">ՀԻՇՈՂՈՒԹՅՈՒՆ</MudText>
                        <!-- You can add filter elements here -->
                        <div style="display: flex; flex-direction: column;">
                            <div style="display: flex; flex-wrap: wrap; gap: 0px;">
                                @if (Memories is not null)
                                {
                                    @foreach (var memory in (showAllMemories ? Memories : Memories.Take(defaultVisibleCount)))
                                    {
                                        <MudChip T="int"
                                                 Color="@(selectedMemories.Contains(memory.Id) ? Color.Primary : Color.Default)"
                                                 Variant="@(selectedMemories.Contains(memory.Id) ? Variant.Filled : Variant.Outlined)"
                                                 OnClick="@(() => ToggleMemorySelection(memory.Id))"
                                                 Class="os-chip">
                                            @memory.Size
                                        </MudChip>
                                    }
                                }
                            </div>
                            @if (Memories != null && Memories.Count > defaultVisibleCount)
                            {
                                <div style="margin-top: 8px; display: flex; justify-content: center;">
                                    <MudButton Variant="Variant.Text"
                                               Size="Size.Small"
                                               Color="@(showAllMemories ? Color.Secondary : Color.Primary)"
                                               OnClick="@ToggleShowAllMemories">
                                        @(showAllMemories ? "Փակել" : "Տեսնել Ավելին")
                                    </MudButton>
                                </div>
                            }
                        </div>

                    </MudCard>

                    <MudCard Style="padding: 16px; min-height: 150px;border-radius: 0; box-shadow: none;margin-bottom: 1px;margin-block-start:1px;">
                        <MudText Typo="Typo.subtitle1" Color="Color.Dark" Style="font-weight: 600;">ՕՊԵՐԱՏԻՎ ՀԻՇՈՂՈՒԹՅՈՒՆ</MudText>
                        <!-- You can add filter elements here -->
                        <div style="display: flex; flex-direction: column;">
                            <div style="display: flex; flex-wrap: wrap; gap: 0px;">
                                @if (Rams is not null)
                                {
                                    @foreach (var ram in (showAllRams ? Rams : Rams.Take(defaultVisibleCount)))
                                    {
                                        <MudChip T="int"
                                                 Color="@(selectedRams.Contains(ram.Id) ? Color.Primary : Color.Default)"
                                                 Variant="@(selectedRams.Contains(ram.Id) ? Variant.Filled : Variant.Outlined)"
                                                 OnClick="@(() => ToggleRamSelection(ram.Id))"
                                                 Class="os-chip">
                                            @ram.Size
                                        </MudChip>
                                    }
                                }
                            </div>
                            @if (Rams != null && Rams.Count > defaultVisibleCount)
                            {
                                <div style="margin-top: 8px; display: flex; justify-content: center;">
                                    <MudButton Variant="Variant.Text"
                                               Size="Size.Small"
                                               Color="@(showAllRams ? Color.Secondary : Color.Primary)"
                                               OnClick="@ToggleShowAllRams">
                                        @(showAllRams ? "Փակել" : "Տեսնել Ավելին")
                                    </MudButton>
                                </div>
                            }
                        </div>
                    </MudCard>

                    <MudCard Class="color-filter-container" Style="padding: 16px; min-height: 150px; border-radius: 0; box-shadow: none; margin-bottom: 1px; margin-block-start: 1px;">
                        <MudText Typo="Typo.subtitle1" Color="Color.Dark" Style="font-weight: 600;">ԱՌԿԱ ԳՈՒՅՆԵՐ</MudText>
                        <div style="display: flex; flex-direction: column;">
                            <div style="display: flex; flex-wrap: wrap; gap: 8px; align-items: center;">
                                @if (Colors is not null)
                                {
                                    @foreach (var color in (showAllColors ? Colors : Colors.Take(defaultVisibleCount)))
                                    {
                                        <div style="display: flex; flex-direction: column; align-items: center;">
                                            <!-- Color swatch -->
                                            <div class="color-swatch @(selectedColors.Contains(color.Id) ? "selected" : "")"
                                                 style="background-color: @color.HexCode;"
                                                 @onclick="@(() => ToggleColorSelection(color.Id))">
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                            @if (Colors != null && Colors.Count > defaultVisibleCount)
                            {
                                <div style="margin-top: 8px; display: flex; justify-content: center;">
                                    <MudButton Variant="Variant.Text"
                                               Size="Size.Small"
                                               Color="@(showAllColors ? Color.Secondary : Color.Primary)"
                                               OnClick="@ToggleShowAllColors">
                                        @(showAllColors ? "Փակել" : "Տեսնել Ավելին")
                                    </MudButton>
                                </div>
                            }
                        </div>
                    </MudCard>
                </div>
            </div>
            <!-- Right: Smartphones -->
            <div style="flex: 1;">
                <MudGrid GutterSize="3">
                    @if (Laptops is not null)
                    {
                        @foreach (var laptop in Laptops)
                        {
                            <MudItem xs="12" sm="6" md="4" lg="3">
                                <MudCard Class="product-card"
                                         Style="height: 100%; width: 100%;max-width: 300px;"
                                         @onclick="@(() => NavigateToLaptop(laptop))">
                                    <MudChip T="bool"
                                             Color="@(laptop.IsAvailable ? Color.Success : Color.Error)"
                                             Variant="Variant.Filled"
                                             Class="ml-2 mt-2 availability-chip"
                                             Style="color: white; z-index: 2; box-shadow: 0 2px 4px rgba(0,0,0,0.2);">
                                        @(laptop.IsAvailable ? "Առկա է" : "Առկա չէ")
                                    </MudChip>

                                    <div class="image-container"
                                         style="width: 100%;aspect-ratio: 1;display: flex;justify-content: center;align-items: center;">
                                        <MudCardMedia Image="@laptop.ImagesUrls.FirstOrDefault()" Class="product-image" Style="width: 100%;height: 100%; object-fit: cover;" />
                                    </div>


                                    <MudCardContent Class="px-4 pt-3 pb-1">
                                        <MudText Typo="Typo.h6" Class="product-name">@laptop.Name</MudText>
                                        <MudText Typo="Typo.body2" Class="mb-2 product-description">@laptop.Description</MudText>
                                        <MudText Typo="Typo.subtitle1" Color="Color.Primary" Class="price-text">
                                            @($"{laptop.Price:C}")
                                        </MudText>
                                    </MudCardContent>

                                    <MudCardActions Class="px-4 pb-3">
                                        <MudButton Variant="Variant.Filled"
                                                   Color="Color.Primary"
                                                   EndIcon="@Icons.Material.Filled.ShoppingCart"
                                                   Class="buy-button"
                                                   Disabled="@(!laptop.IsAvailable)">
                                            @(laptop.IsAvailable ? "Add to Cart" : "Out of Stock")
                                        </MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    }
                </MudGrid>
            </div>

        </div>
    </MudContainer>
</div>

@code {
    [Inject] private NavigationManager Nav { get; set; } = default!;
    public List<CategoryDto> Categories { get; set; } = new List<CategoryDto>();
    public List<LaptopDto> Laptops { get; set; } = new List<LaptopDto>();
    public List<BrandDto> Brands { get; set; } = new List<BrandDto>();
    public List<OSDto> Oses { get; set; } = new List<OSDto>();
    public List<ModelDto> Models { get; set; } = new List<ModelDto>();
    public List<MemoryDto> Memories { get; set; } = new List<MemoryDto>();
    public List<RamDto> Rams { get; set; } = new List<RamDto>();
    public List<ColorDto> Colors { get; set; } = new List<ColorDto>();

    private ElementReference scrollContainer;
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Fade;



    private Dictionary<string, string> _categoryUrlMap = new()
    {
        { "հեռախոսներ","smartphones" },
        { "նոթբուքներ", "laptops" },
        { "հեռուստացույցներ", "tvs" },
        // Add more as needed
    };

    [Inject] private IJSRuntime JS { get; set; } = default!;

    private async Task ScrollLeft()
    {
        await JS.InvokeVoidAsync("scrollElementBy", scrollContainer, -300);
    }

    private async Task ScrollRight()
    {
        await JS.InvokeVoidAsync("scrollElementBy", scrollContainer, 300);
    }

    protected override async Task OnInitializedAsync()
    {
        Categories = (await CategoryApi.GetCategories()).ToList();

        foreach (var category in Categories)
        {
            category.Icon = GetCategoryIcon(category.Name);
        }

        Laptops = (await LaptopApi.GetLaptops()).ToList();
        var categoryId = Laptops.FirstOrDefault()?.CategoryId;

        Brands = (await BrandApi.GetBrandsByCategoryId(categoryId)).ToList();
        Oses = (await OSApi.GetOsesByCategoryId(categoryId)).ToList();
        Models = (await ModelApi.GetModelsByCategoryId(categoryId)).ToList();
        Memories = (await MemoryApi.GetMemoriesByCategoryId(categoryId)).ToList();
        Rams = (await RamApi.GetRamsByCategoryId(categoryId)).ToList();
        Colors = (await ColorApi.GetColorsByCategoryId(categoryId)).ToList();
    }
    private string GetCategoryIcon(string categoryName)
    {
        var lowerName = categoryName.ToLower();

        return lowerName switch
        {
            "հեռախոսներ" => Icons.Material.Filled.PhoneIphone,
            "նոթբուքներ" => Icons.Material.Filled.Laptop,
            "հեռուստացույցներ" => Icons.Material.Filled.Tv,
            _ => Icons.Material.Filled.DeviceUnknown// Default icon
        };
    }
    void NavigateToCategory(string categoryName)
    {
        if (_categoryUrlMap.TryGetValue(categoryName, out var urlSlug))
        {
            Nav.NavigateTo($"category/{urlSlug}");
        }
        else
        {
            Nav.NavigateTo($"category/{Uri.EscapeDataString(categoryName.ToLower())}");
        }
    }

    void NavigateToLaptop(LaptopDto laptopDto)
    {
        Nav.NavigateTo($"laptops/{laptopDto.Id}");
    }

    private HashSet<int> selectedBrands = new();
    private HashSet<int> selectedOses = new HashSet<int>();
    private HashSet<int> selectedModels = new HashSet<int>();
    private HashSet<int> selectedMemories = new HashSet<int>();
    private HashSet<int> selectedRams = new HashSet<int>();
    private HashSet<int> selectedColors = new HashSet<int>();
    private HashSet<int> selectedYears = new();
    private bool showMobileFilters = false;

    private void ToggleMobileFilters()
    {
        showMobileFilters = !showMobileFilters;
    }
    private async Task ApplyFilters(bool closeSidebar = false)
    {
        await ApplyFiltersInternal();

        // Close the mobile sidebar
        if (closeSidebar)
        {
            showMobileFilters = false;
        }
    }
    private async Task ResetFilters()
    {
        selectedBrands.Clear();
        selectedOses.Clear();
        selectedModels.Clear();
        selectedMemories.Clear();
        selectedRams.Clear();
        selectedColors.Clear();
        await ApplyFilters();
    }
    private async Task ApplyFiltersInternal()
    {
        // Get all phones first
        var allLaptops = await LaptopApi.GetLaptops();
        var filteredLaptops = allLaptops.AsEnumerable();

        // Apply brand filter if any brands are selected
        if (selectedBrands.Count > 0)
        {
            filteredLaptops = filteredLaptops.Where(p => selectedBrands.Contains(p.BrandId));
        }

        // Apply OS filter if any OSes are selected
        if (selectedOses.Count > 0)
        {
            filteredLaptops = filteredLaptops.Where(p => selectedOses.Contains(p.OsId));
        }

        // Apply Model filter if any Models are selected with Announcement Year
        if (selectedYears.Count > 0)
        {
            // Find model ids where year matches
            var modelIds = Models
                .Where(m => selectedYears.Contains(m.AnnouncementYear))
                .Select(m => m.Id)
                .ToList();

            // Then filter phones
            filteredLaptops = filteredLaptops
                .Where(p => modelIds.Contains(p.ModelId));
        }


        // Apply Memory filter if any Memories are selected
        if (selectedMemories.Count > 0)
        {
            filteredLaptops = filteredLaptops.Where(p => selectedMemories.Contains(p.MemoryId));
        }

        // Apply Ram filter if any Rams are selected
        if (selectedRams.Count > 0)
        {
            filteredLaptops = filteredLaptops.Where(p => selectedRams.Contains(p.RamId));
        }

        // Apply Color filter if any Colors are selected
        if (selectedColors.Count > 0)
        {
            filteredLaptops = filteredLaptops.Where(p => selectedColors.Contains(p.ColorId));
        }

        Laptops = filteredLaptops.ToList();
        StateHasChanged();
    }
    bool showAllBrands = false;
    int defaultVisibleCount = 2;

    void ToggleShowAllBrands()
    {
        showAllBrands = !showAllBrands;
    }
    private async Task ToggleBrandSelection(int brandId)
    {
        if (selectedBrands.Contains(brandId))
        {
            selectedBrands.Remove(brandId);
        }
        else
        {
            selectedBrands.Add(brandId);
        }
        await ApplyFilters();
    }

    bool showAllOses = false;
    void ToggleShowAllOses()
    {
        showAllOses = !showAllOses;
    }

    private async Task ToggleOsSelection(int osId)
    {
        if (selectedOses.Contains(osId))
        {
            selectedOses.Remove(osId);
        }
        else
        {
            selectedOses.Add(osId);
        }
        await ApplyFilters();
    }

    bool showAllYears = false;
    void ToggleShowAllYears()
    {
        showAllYears = !showAllYears;
    }

    private async Task ToggleYearSelection(int year)
    {
        if (selectedYears.Contains(year))
        {
            selectedYears.Remove(year);
        }
        else
        {
            selectedYears.Add(year);
        }

        await ApplyFilters();
    }

    bool showAllMemories = false;
    void ToggleShowAllMemories()
    {
        showAllMemories = !showAllMemories;
    }
    private async Task ToggleMemorySelection(int memoryId)
    {
        if (selectedMemories.Contains(memoryId))
        {
            selectedMemories.Remove(memoryId);
        }
        else
        {
            selectedMemories.Add(memoryId);
        }
        await ApplyFilters();
    }

    bool showAllRams = false;
    void ToggleShowAllRams()
    {
        showAllRams = !showAllRams;
    }
    private async Task ToggleRamSelection(int ramId)
    {
        if (selectedRams.Contains(ramId))
        {
            selectedRams.Remove(ramId);
        }
        else
        {
            selectedRams.Add(ramId);
        }
        await ApplyFilters();
    }

    bool showAllColors = false;
    void ToggleShowAllColors()
    {
        showAllColors = !showAllColors;
    }
    private async Task ToggleColorSelection(int colorId)
    {
        if (selectedColors.Contains(colorId))
        {
            selectedColors.Remove(colorId);
        }
        else
        {
            selectedColors.Add(colorId);
        }
        await ApplyFilters();
    }

    private bool IsBrandSelected(int brandId)
    {
        return selectedBrands.Contains(brandId);
    }
    private string GetBrandCardStyle(int brandId)
    {
        var isSelected = IsBrandSelected(brandId);
        return $"height: 100%; width: 100%; max-width: 400px; " +
               $"border: 2px solid {(isSelected ? "blue" : "transparent")}; " +
               $"background-color: {(isSelected ? "#e3f2fd" : "white")}; " +
               $"border-radius: 10px; " +
               $"transition: border-color 0.3s, background-color 0.3s;";
    }

}


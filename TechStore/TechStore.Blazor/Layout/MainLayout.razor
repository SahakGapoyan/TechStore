@using MudBlazor
@inject ISmartPhoneApi SmartphoneApi
@inject ILaptopApi LaptopApi
@using TechStore.Blazor.DtoModels.Product
@using TechStore.Blazor.Interfaces
@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager NavigationManager

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout Style="display: flex; flex-direction: column; min-height: 100vh;">
    <MudAppBar Elevation="4" Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />

        <div style="height: 200px; display: flex; align-items: center;">
            <img src="Images/TechStoreLogo.png" alt="TechStore"
                 style="max-height: 100%; height: auto; width: auto; cursor: pointer;"
                 @onclick="@(() => NavigationManager.NavigateTo("/"))" />
        </div>

        <!-- Product Search -->
        <MudAutocomplete T="ProductSuggestionDto"
                         @ref="_autoCompleteRef"
                         @bind-Value="_selectedProduct"
                         SearchFunc="@SearchProducts"
                         ToStringFunc="@(p => p?.Name ?? string.Empty)"
                         MinCharacters="2"
                         Placeholder="Search products..."
                         Variant="Variant.Outlined"
                         Dense="true"
                         DebounceInterval="300"
                         @bind-Text="_searchText"
                         Immediate="true"
                         CloseOnClick="false"
                         Adornment="Adornment.End"
                         Class="mx-4 white-search-box"
                         Style="position: relative;"
                         OnAdornmentClick="@TriggerSearch"
                         OnKeyDown="@OnKeyDownHandler"
                         OnItemSelected="@OnProductSelected"
                         AdornmentIcon="@Icons.Material.Filled.Search">
            <ItemTemplate>
                <MudText>@context.Name</MudText>
            </ItemTemplate>
        </MudAutocomplete>

        <MudSpacer />
        <SignInButton />
    </MudAppBar>

    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu />
    </MudDrawer>

    <MudMainContent Style="flex: 1; display: flex; flex-direction: column;">
        <div class="p-4" style="flex: 1;background-color: #f0f0f0;">
            @Body
        </div>

        <!-- Footer -->
        <footer style="background-color: black; padding: 2rem 0;">
            <MudContainer MaxWidth="MaxWidth.False" Style="color: white;">
                <MudGrid>
                    <!-- Column 1 -->
                    <MudItem xs="12" sm="6" md="3">
                        <div style="display: flex; align-items: flex-start; gap: 12px;">
                            <!-- Icon -->
                            <MudIcon Icon="@Icons.Material.Filled.Call" Size="Size.Large"
                                     Style="margin-top:2px" />

                            <!-- Text Section -->
                            <div>
                                <MudText Typo="Typo.subtitle1">
                                    <a href="tel:+37410102030" Style="color:inherit; transition: border-bottom 0.2s ease; border-bottom: 1px solid transparent;"
                                       onmouseover="this.style.borderBottom='1px solid gray'"
                                       onmouseout="this.style.borderBottom='1px solid transparent';"> +374 10 10 20 30</a>,
                                    <a href="tel:+37411112131" Style="color:inherit; transition: border-bottom 0.2s ease; border-bottom: 1px solid transparent;"
                                       onmouseover="this.style.borderBottom='1px solid gray'"
                                       onmouseout="this.style.borderBottom='1px solid transparent';">+374 11 11 21 31</a>
                                </MudText>

                                <MudText Typo="Typo.subtitle2" Style="color: gray;">Սպասարկման ծառայություն</MudText>
                                <MudText Typo="Typo.subtitle2" Style="color: gray;">Աշխատանքային ժամերը՝ 10:00 - 21:00</MudText>
                            </div>
                        </div>
                    </MudItem>


                    <!-- Column 2 -->
                    <MudItem xs="12" sm="6" md="3">
                        <div style="display: flex; align-items: flex-start; gap: 12px;">
                            <!-- Icon -->
                            <MudIcon Icon="@(Icons.Material.Filled.LocalShipping)" Size="Size.Large"
                                     Style="margin-top:2px" />

                            <!-- Text Section -->
                            <div>
                                <MudText Typo="Typo.subtitle1">Առաքում</MudText>
                                <MudText Typo="Typo.subtitle2" Style="color:gray">1 աշխատանքային օրվա ընթացքում</MudText>
                                <MudText Typo="Typo.subtitle2" Style="color:gray">10:00 - 21:00</MudText>
                            </div>
                        </div>
                    </MudItem>

                    <!-- Column 3 -->
                    <MudItem xs="12" sm="6" md="3">
                        <div style="display: flex; align-items: flex-start; gap: 12px;">
                            <!-- Icon -->
                            <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Large"
                                     Style="margin-top:2px" />

                            <!-- Text Section -->
                            <div>
                                <MudText Typo="Typo.subtitle1">Հասցե</MudText>
                                <MudText Typo="Typo.subtitle2" Style="color:gray">Ք․Երևան</MudText>
                                <a href="https://www.google.com/maps/search/?api=1&query=1+Ալեք+Մանուկյան+փողոց"
                                   target="_blank"
                                   rel="noopener noreferrer"
                                   style="text-decoration: none;">
                                    <MudText Typo="Typo.subtitle2"
                                             Style="color:gray; transition: border-bottom 0.2s ease; border-bottom: 1px solid transparent;"
                                             onmouseover="this.style.borderBottom='1px solid gray'"
                                             onmouseout="this.style.borderBottom='1px solid transparent'">
                                        1 Ալեք Մանուկյան փողոց
                                    </MudText>
                                </a>

                            </div>
                        </div>
                    </MudItem>



                    <!-- Column 4 -->
                    <MudItem xs="12" sm="6" md="3">
                        <div style="display: flex; align-items: flex-start; gap: 12px;">
                            <!-- Icon -->
                            <MudIcon Icon="@Icons.Material.Filled.ConnectWithoutContact" Size="Size.Large"
                                     Style="margin-top:2px" />

                            <!-- Text Section -->
                            <div>
                                <MudText Typo="Typo.subtitle1">Հետևեք մեզ</MudText>
                                <div style="display: flex; align-items: center; gap: 8px;">
                                    <MudText Typo="Typo.subtitle2" Style="color:gray">Հետևեք մեզ ինստագրամում</MudText>
                                    <a href="https://www.instagram.com" target="_blank" rel="noopener noreferrer">
                                        <img src="Images/instagram.png" alt="Instagram" style="width: 24px; height: 24px;" />
                                    </a>
                                </div>
                                <div style="display: flex; align-items: center; gap: 8px;">
                                    <MudText Typo="Typo.subtitle2" Style="color:gray">Հետևեք մեզ ֆեյսբուքում</MudText>
                                    <a href="https://www.facebook.com" target="_blank" rel="noopener noreferrer">
                                        <img src="Images/facebook.png" alt="Facebook" style="width: 24px; height: 24px;" />
                                    </a>
                                </div>
                            </div>
                        </div>
                    </MudItem>
                </MudGrid>

                <!-- Copyright row -->
                <MudDivider Class="my-4" />
                <MudText Typo="Typo.caption" Align="Align.Center">
                    © @DateTime.Now.Year TechStore. All rights reserved.
                </MudText>
            </MudContainer>
        </footer>
    </MudMainContent>
</MudLayout>

@code {
    private ProductSuggestionDto? _selectedProduct;
    private string _searchText = string.Empty;
    private MudAutocomplete<ProductSuggestionDto>? _autoCompleteRef;

    [Inject] private NavigationManager Nav { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;

    bool _drawerOpen = false;

    protected override void OnInitialized()
    {
        Nav.LocationChanged += HandleLocationChanged;

        // Initialize search text from current URL if on search page
        var uri = new Uri(Nav.Uri);
        if (uri.AbsolutePath.Contains("search"))
        {
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            _searchText = query["query"] ?? string.Empty;
        }
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Only clear if we're not on a search-related page
        if (!e.Location.Contains("search") && !e.Location.Contains("smartphones") && !e.Location.Contains("laptops"))
        {
            _searchText = string.Empty;
            _selectedProduct = null;
        }
        else if (e.Location.Contains("search"))
        {
            // When navigating to search page, update search text from URL
            var uri = new Uri(e.Location);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            _searchText = query["query"] ?? string.Empty;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        Nav.LocationChanged -= HandleLocationChanged;
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task<IEnumerable<ProductSuggestionDto>> SearchProducts(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value) || value.Length < 2)
            return Enumerable.Empty<ProductSuggestionDto>();

        try
        {
            var smartphoneTask = SmartphoneApi.GetSmartPhoneSuggestions(value);
            var laptopTask = LaptopApi.GetLaptopSuggestions(value);
            await Task.WhenAll(smartphoneTask, laptopTask);

            return (await smartphoneTask).Concat(await laptopTask)
                          .OrderBy(p => p.Name)
                          .Take(10);
        }
        catch
        {
            return Enumerable.Empty<ProductSuggestionDto>();
        }
    }

    private async Task OnProductSelected(ProductSuggestionDto? product)
    {
        if (product == null) return;

        _selectedProduct = null;

        switch (product.ProductType?.ToLower())
        {
            case "smartphone":
                Nav.NavigateTo($"smartphones/{product.Id}");
                break;
            case "laptop":
                Nav.NavigateTo($"laptops/{product.Id}");
                break;
        }
    }

    private async Task OnKeyDownHandler(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await TriggerSearch();
            // Keep the text in the search bar
            if (_autoCompleteRef != null)
            {
                _searchText = _autoCompleteRef.Text;
            }
        }
    }

    private async Task TriggerSearch()
    {
        if (_autoCompleteRef is null)
            return;

        var currentText = _autoCompleteRef.Text;

        if (!string.IsNullOrWhiteSpace(currentText))
        {
            // Keep the search text in the component
            _searchText = currentText;
            Nav.NavigateTo($"search?query={Uri.EscapeDataString(currentText)}");
            StateHasChanged(); // Force update to ensure text stays
        }
    }
    private void HandleSearchBlur()
    {
        // When search loses focus, ensure we maintain the current search text
        if (!string.IsNullOrWhiteSpace(_searchText) &&
            Nav.Uri.Contains("search?query="))
        {
            // Get the current query from URL to ensure sync
            var uri = new Uri(Nav.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var urlQuery = query["query"] ?? string.Empty;

            // Only update if different to prevent unnecessary renders
            if (_searchText != urlQuery)
            {
                _searchText = urlQuery;
                StateHasChanged();
            }
        }
    }
}

<style>
    .white-search-box .mud-input-outlined {
        background-color: white !important;
    }

        .white-search-box .mud-input-outlined .mud-input-slot {
            background-color: white !important;
        }

    .white-search-box .mud-input-root {
        background-color: white !important;
    }

    .search-container {
        display: flex;
        align-items: center;
        background-color: white;
        padding: 4px 8px;
        border-radius: 4px;
    }
</style>